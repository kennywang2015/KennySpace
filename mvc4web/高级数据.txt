数据访问层相关的技术，如何使用ORM对象关系映射 数据访问模式来构建mvc web应用程序。

数据访问模式：
	mvc框架最大的特点就是扩展性。 允许开发者灵活插入不同的组件和框架。  mvc构建在.net 4.5之上，所有流行的数据访问框架，ado.net，linq to sql,ado.net entityframework或者Nhibernate，都可以用来构建mvc数据访问层。
	
	Plain Old CLR Objects 简写POCO 朴素的旧的CLR对象，代表业务实体类 模型 的.net 类。这些类型专注于业务属性和业务行为，不需要任何数据库结构代码。

POCO类的主要目标就是让业务模型做到持久层隔离 persistence ignorance. 这种设计方法允许业务模型与数据访问层模型之间相互独立。因为业务模型不包含任何数据访问代码。所以很容易隔离测试，
而且底层的数据存储可以很容易进行包转转换以适应变化的业务需要。

public class product
{
	public long Id{get;set;}
	....
}
仅仅包含属性和方法 没有包含任何数据访问代码。 如何使用ORM框架以及repository模式（存储库模式）来持久化POCO类？
最大的好处就是解耦。
基于实体类的例子，类的方法为抽象方法，声明为abstract。这是抽象方法基类强调一致性的方式。让后续子类实现这些行为方法：
public abstract class BaseEntiry
{
	public string Key {get;set;}
	
	public abstract void GenerateKey();
}

使用REPOSITORY模式：
		模式是一种数据访问模式，可以带来数据访问组件更多的松耦合。单独的一个或多个类（叫repository）会负责持久化应用业务模型，而不是直接在控制器或者业务模型类里包含数据访问逻辑。
		
	respository模式实现mvc设计原则-----分离关注点。可以把数据访问层和其余的应用代码隔离，以便利用POCO带来的好处。
	
有几种不同的方法来设计repository（存储库）
	1.每种业务模式与repository一对一
		创建respository最简单的方法就是每种业务模式类都创建一个repository。但是会带来重复的代码和复杂性。特别是每个repository与别的repository存储库交互时。
	2.使用聚合根
		是指一个可以独立存在的类，负责不同类之间的映射。
	3.泛型repository一对多
		与创建多个repository不同，可以使用泛型创建一个通用的repository，可以在多个程序中使用。
		
		
	public class ModelRepository
	{
		public ModelRepository(){}
		
		public void Add(Model instance){}
		
		public void UPdate(Model instance){}
		
		public void Delete(Model instance){}
		
		public Model Get(stirng id){}
		
		public ICollection<Model> GetAll(){}
	}
	
	除了执行CRUD，repository还需要缓存实体对象。缓存处理的对象大部分都是静态对象，比如从下拉菜单里查询值。对经常更新的实体，这可能会有麻烦。
	
	MVC控制器与repository交互以加载和持久化业务模型数据。通过利用依赖注入（DI）,repository可以注入到控制器的构造函数里。
	
	mvc与repository交互，而不是直接与EntityFrameWork交互。
	
使用依赖注入方法向控制器的构造函数注入repository对象，以及控制器如何使用repository来查询交易对象信息列表。使用依赖注入让模拟repository来测试控制器也变得简单：
public class AuctionsConroller: Controller
{
	private readonly IRepository _repository;
	
	public AuctionsController(IRepository repository)
	{
		_repository=repository;	
	}
	public ActionResultIndex()
	{
		var auctions = _repository.GetAll<Auction>();
		return auctions;
	}
}




对象关系映射器：
	对象关系映射器是一种在支持类型和关系数据库模型之间进行实体映射的数据访问模式。主要原因就是可以实现在业务模式和数据模型之间解耦。这种分离也称为对象关系阻抗适配object relational impedance mismatch.
主要原因：
	粒度	有时候模型类会包含比数据库的表更多的类。用不同的类来表示不同的地址是个不错的主意。

	继承	为了共享相同的逻辑类继承自别的类----OO的继承，通常关系型数据库是无法理解这种继承的概念的。

	标识	关系型数据库依赖单个的列来作为每条记录的唯一标识（主键）。经常与.net框架的做法冲突。对象相等通常通过对象标志相等a=b以及对象相等a.Equals(b)来判断，而这两种方法都没有单独的属性或者域来作为唯一的标识。

	关联	关系型数据库使用主键和外键建立实体之间的关联，.net 框架使用单向引用标识对象关联。无法区分一对多，多对多的关系。

	数据导航	框架访问数据的方式需要通过不同的模型对象之间的关联来查询数据，而在数据库中值需要使用sql语句。

实体框架概述
	LINQ to SQL 和 ADO.NET Entity Framework. 也有第三方ORM框架或者开源的 Nhibernate。

	EF是一个对象/关系映射器，以包含在.net框架里，使用ef，只需要与实体模型交互，而不需要直接与应用的关系数据库模型交互。

	抽象是允许开发人员关注业务行为和实体关系，而不是如何存储实体对象到关系数据模型中。
	为了与实体模型交互，开发人员需要使用ef数据上下文来执行查询或持久化模型操作。
	到调用这些操作时，ef会生成执行这些操作的必要的sql语句。

	在传统数据访问方法向orm转换，问题是存储过程起什么作用。
	因为实体模型主要关注如何使用orm，不考虑编写sql。ef也提供了调用存储过程的支持。

选择数据访问方法
	数据库优先方式	ef可以根据关系型数据库中的表来生成业务模型。ef使用特殊的配置文件.edmx来存储数据库schema、数据模型以及映射关系的信息。

	模型优先方式	没有数据库情况下，ef提供设计器可以创建概念数据模型。使用数据库优先模型，ef使用schema文件来存储模型到数据库schema的映射信息。创建之后，ef设计器可以生成创建数据库的schema。

	代码优先方式	使用持久层隔离persistence ignorance方法的开发人员可以直接在代码里创建业务模型。ef提供了一个特殊的映射api，以及一些惯例来支持这个方法工作。在使用代码优先方式是，ef没有任何外部文件来存储数据库schema，因为映射api在运行时使用这些惯例动态生成数据库schema。


数据库并发
	处理并发冲突是web开发人员必须面对的问题。当多个用户同时修改相同的数据时，就会引起并发冲突问题。默认，除非配置ef检测冲突，大多使用“最后进入”规则，就是最后提交修改信息的用户将会其作用，将会覆盖先提交的修改数据。

	保守式并发	需要数据库组织其他的用户重写别人提交的修改数据。当查询单行数据时，会加上只读锁，直到同一个用户更新完数据，或移除只读锁。这个会带来问题，因为web网站依赖于无状态模型。其中主要问题是何时移除锁。
	
	开放式并发
	检查最新查询的数据是否被修改。最简单的实现就是在表中加一个最后更新的时间戳。
	
	EF不直接支持开放式，但是推荐使用开放式。ef提供给开放式有两种方法：给实体对象增加时间戳timestamp属性，以及处理ef数据上下文返回的optimisticConcurrencyException异常。
	
	添加时间戳属性给实体对象的例子。添加完毕后，任何数据操作都会自动在sql where语句中添加新的时间戳。
	[Timesatmp]
	public Byte[] Timestamp {get;set;}
		
	处理optimisticConcurrencyException异常，查询用户保存的实体对象的状态是否与数据库的状态一致：
	try
	{
		dbContext.Set<Product>().Add(instance);
		dbContext.SaveChanges();
	}
	catch(DbUpdateConcurrencyException ex)
	{
		var entry =ex.Entries.Single();
		var databaseValues=(Product)entry.GetDatabaseValues().ToObject();
		var clientValues=(Product)entry.Entity;
		
		if(databaseValues.Name!=clientValues.Name)
		//记录并发异常日志
	}
	catch(DataException ex)
	{
		//记录数据异常日志
	}
	catch(Exception ex)
	{
		//记录普通异常日志
	}



领域驱动设计DDD以Domain域为关注点，而非实现技术，也就是关注Model模型设计。  驱动开发behavior-driven-development BDD
			测试驱动开发test-driven-development TDD
			
使用持久化隔离方法来确保应用程序可以很容易支持多种类型的持久型模型、关系型数据库、云存储以及Nosql数据库。

使用EF代码优先方法
	代码有限可以使用POCO类。数据库优先和模型优先中，EF会从EntityObject基类继承模型类，并提供一些基础方法来把模型类映射到数据库schema上。因为数据库优先和模型优先需要持久化EntityObject子类，所以这些子类不支持持久化隔离机制。
	
	代码有限方法是使用惯例来映射POCO类，而不是使用实体基类：
		1.表明使用多元化的窗体实体类名命名。
		2.列名使用属性名称。
		3.主键使用名为ID的属性或者类名ID。
		4.默认的链接字符串匹配DataContext类名。
		
代码有限数据标记
	mvc使用了一些相同的属性标记来做域成员级别的验证工作。
	
	代码有限数据标记
	Column			列名称、序号位置和要映射到的属性的数据类型
	ComplexType				在不包含键的类上使用。而且ef无法管理。通常用于管理相关实体中的标量属性。
	ConcurrencyCheck		用于指定属性是否应该参与开放式并发检查。
	DatabaseGenerated		用于标记应由数据库生成的属性。
	ForeignKey			用于标识相关的实体，表示使用表之间的外键约束。
	InverseProperty		用于标识该属性所标识关系的另一端对应属性
	Key			唯一标识实体的一个或多个属性
	MaxLength
	MinLength		列最大最小属性
	NotMapped		标记将不会由实体框架映射的属性
	Required		标记必须属性
	StringLength		域成员的最大最小长度
	Table 			实体使用的表名称
	Timestamp		时间戳的属性列，用于保存前的检查工作
	
	
	重写惯例
		使用惯例的主要目的是提升开发效率，但是ef意识到某些情况下需要打破惯例，所以提供了api允许开发修改默认设置的惯例规则
		
		使用Key标记属性的实体类的例子，重写了默认的主键：
		public class Product
		{
			[Key]
			public string MasterKey {get;set;}
			public string Name {get;set;}
		}
		也可以删除或修改默认惯例
		例子：删除PluralizingTablenameConvention表命名惯例，签名可以用在数据库表中：
		public class ProductEntities: DbContext
		{
			protected override void OnModelCreating(DbModelBuilder modelBuilder)
			{
				//修改Code First惯例以便不使用PluralizingTablename
				{
					modelBuilder.Conventions.Remove<PluralizingTablenameConvention>();
				}
			}
		}
	

	POCO类组成Ebuy交易网站。。使用是DDD。每个POCO实体类都继承自一个基实体类，这个基实体类包含所有业务模型类公共的行为和属性。
	
	使用了SOLID设计原则，实现了两个接口：一个是自定义的IEntity接口，为实体定义了以URL为键的命名原则；
	另一个是.net的IEquatable接口，定义了不同实体对象的比较丰富的基类：
	public interface IEntity
	{
		//唯一公开标识，通过web暴露的标识符
		string key {get;}
	}
	public abstract class Entity<TId>: IEntity,IEquatable<Entity<TId>> where TId: struct
	{
		[Key]
		public virtual TId Id
		{
			get
			{
				if(_id==null && typeof(TId) == typeof(Guid))
				{
					_id=Guid.NewGuid();
				}
				
				return _id==null?default(TId):(TId) _id;
				
			}
			
			protected set {_id=value;}
		}
		private object _id;
		
		[Unique,StringLength(50)]
		public virtual string Key
		{
			get{return _key=_key??GenerateKey():}
			protected set{_key=value;}
		}
		private string _key;
		
		protected virtual string GenerateKey()
		{
			return KeyGenerator.Generate();
		}
		
	}
	
	
	继承自实体类的子类必须定义自己的ID。注意其他行为，比如保证Key属性包含唯一的值，且值必须是50个字符。另外，如果通过重写equal操作符来判断相同模型对象的等价关系。
	
	付款模型Payment继承Entity，使用基于GUID的标识符，包含基元类型和复杂类型的属性。复杂属性用来表示与其他模型之间的关系，例如Payment包含Auction和User对象的引用关系
	
	public class Payment:Entity<Guid>
	{
		public Currency Amount {get; private set;}
		public Auction Auction{get; private set;}
		public DateTime Timestamp{get;private set;}
		public User User{get;set;}
		
		public Payment(User user,Auction auction,Currency amount)
		{
			User=user;
			Auction=auction;
			Amount=amount;
			Timestamp=Clock.Now;
		}
		
		
	}
	
	使用域模型的关键就是要把模型分割成一个或多个上下文，每个上下文定义成聚合群集aggregate cluster。而每个聚合群集由多个作为单一逻辑单元协同工作的对象组成。
	
	EBuy的聚合根就是Auction类。表示应用程序中所有其他类必须使用的类。
	和其他核心实体类的关系密切，
	
	ICollection<T>用来定义不同的相关类。
	
	public class Auction:Entity<Guid>
	{
		public virtual string Title{get;set;}
		public virtual string Description{get;set;}
		public virtual DateTime StartTime{get;set;}
		public virtual DateTime EndTime{get;set;}
		public virtual Currency CurrentPrice{get;set;}
		
		public Guid? WinningBidId{get;set;}
		public virtual Bid WinningBid{get;private set;}
		
		public bool IsCompleted
		{
			get{return EndTime<=Clock.Now;}
		}
		
		public virtual bool IsFeaturedAuction{get; private set;}
		
		public virtual ICollection<Category> Categories{get;set;}
		
		public virtual ICollection<Bid> Bids{get;set;}
		
		public virtual ICollection<WebsiteImage> Images{get;set;}
		
		public long OwnerId{get;set;}
		
		public virtual User Owner{get;set;}
		
		public virtual CurrencyCode CurrencyCode
		{
			get
			{
				return (CurrentPrice!=null )? CurrentPrice.Code:null;
			}
		}
		
		public Auction()
		{
			Bids=new Collection<Bid>();
			Categories=new Collection<Category>():
			Images=new Collection<WebsiteImage>();
		}
		
		public void FeatureAuction()
		{
			IsFeaturedAuction=true;
		}
		
		public Bid PostBid(User user,double bidAmount)
		{
			reutrn PostBid(user,new Currency(CurrencyCode,bidAmount));
		}
		
		public Bid PostBid(User user,Currency bidAmount)
		{
			Contract.Requires(user!=null);
			
			if(bidAmount.Code!=CurrencyCode)
				throw new InvalidBidException(bidAmount,WinningBid);
				
			if(bidAmount.Value<=CurrentPrice.Value)
				throw new InvalidBidException(bidAmount,WinningBid);
				
			var bid=new Bid(user,this,bidAmount);
			
			CurrentPrice=bidAmount;
			WinningBid=bid.Id;
			
			Bids.Add(bid);
			
			return bid;
		}
	}
	
使用数据上下文
		ef代码优先方法需要创建继承自DbContext的数据访问上下文类。这个类包含领域模型里每个实体的属性。
		自定义实体上下文类可以通过继承自实体上下文的基类来处理特定的查询和保存数据，也可以自定义一些实体映射的逻辑代码。
		
		Ef代码优先数据上下文包含两个实体类：类别Categories和产品Products。
		下面是DataContext定义，使用LINQ来查询特定类别的产品。
		
		public partial class DataContext :DbContext
		{
			public DbSet<Category> Categories {get;set;}
			
			public DbSet<Product> Products{get;set;}
		}

		public IList<Product> GetProductsByCategory(Category item)
		{
			IList<Product> result =null;
			
			var db=new DataContext();
			result = db.Products.Where(1=>q.Category.Equals(item)).ToList();
			
			reutrn result;
		}

为了处理实体多对多关系，需要重写数据上下文DataContext的onModelCreating()方法。
		protected override void OnModelCreating(DbModeBuilder modelBuilder)
		{
			modelBuilder.Entity<Bid>()
				.HasRequired(x=>x.Auction)
				.WithMany()
				.WillCascadeOnDelete(false);
		}

	默认，ef会在mvc的web.config中查找与自定义数据访问类一样的名字的链接字符串：
	name="Ebuy.DataAccess.DataContext"


可以使用repository模式实现IRepository接口的repository类，允许开发使用IOC容器注入repository到控制器中，而不是直接使用ef数据上下文。

public class Repository :IRepository
{
	private readonly DbContext _context;
	
	public Repository(DbContext context)
	{
		_context=context;
		_isSharedContext=isSharedContext;
	}
}





为了支持排序、过滤、数据分页。EF使用Linq来与数据库交互。
创建并根据ef数据上下文来调用linq。 比如调用ToList()来执行查询。





















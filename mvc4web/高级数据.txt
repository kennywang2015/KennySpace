数据访问层相关的技术，如何使用ORM对象关系映射 数据访问模式来构建mvc web应用程序。

数据访问模式：
	mvc框架最大的特点就是扩展性。 允许开发者灵活插入不同的组件和框架。  mvc构建在.net 4.5之上，所有流行的数据访问框架，ado.net，linq to sql,ado.net entityframework或者Nhibernate，都可以用来构建mvc数据访问层。
	
	Plain Old CLR Objects 简写POCO 朴素的旧的CLR对象，代表业务实体类 模型 的.net 类。这些类型专注于业务属性和业务行为，不需要任何数据库结构代码。

POCO类的主要目标就是让业务模型做到持久层隔离 persistence ignorance. 这种设计方法允许业务模型与数据访问层模型之间相互独立。因为业务模型不包含任何数据访问代码。所以很容易隔离测试，
而且底层的数据存储可以很容易进行包转转换以适应变化的业务需要。

public class product
{
	public long Id{get;set;}
	....
}
仅仅包含属性和方法 没有包含任何数据访问代码。 如何使用ORM框架以及repository模式（存储库模式）来持久化POCO类？
最大的好处就是解耦。
基于实体类的例子，类的方法为抽象方法，声明为abstract。这是抽象方法基类强调一致性的方式。让后续子类实现这些行为方法：
public abstract class BaseEntiry
{
	public string Key {get;set;}
	
	public abstract void GenerateKey();
}

使用REPOSITORY模式：
		模式是一种数据访问模式，可以带来数据访问组件更多的松耦合。单独的一个或多个类（叫repository）会负责持久化应用业务模型，而不是直接在控制器或者业务模型类里包含数据访问逻辑。
		
	respository模式实现mvc设计原则-----分离关注点。可以把数据访问层和其余的应用代码隔离，以便利用POCO带来的好处。
	
有几种不同的方法来设计repository（存储库）
	1.每种业务模式与repository一对一
		创建respository最简单的方法就是每种业务模式类都创建一个repository。但是会带来重复的代码和复杂性。特别是每个repository与别的repository存储库交互时。
	2.使用聚合根
		是指一个可以独立存在的类，负责不同类之间的映射。
	3.泛型repository一对多
		与创建多个repository不同，可以使用泛型创建一个通用的repository，可以在多个程序中使用。
		
		
	public class ModelRepository
	{
		public ModelRepository(){}
		
		public void Add(Model instance){}
		
		public void UPdate(Model instance){}
		
		public void Delete(Model instance){}
		
		public Model Get(stirng id){}
		
		public ICollection<Model> GetAll(){}
	}
	
	除了执行CRUD，repository还需要缓存实体对象。缓存处理的对象大部分都是静态对象，比如从下拉菜单里查询值。对经常更新的实体，这可能会有麻烦。
	
	MVC控制器与repository交互以加载和持久化业务模型数据。通过利用依赖注入（DI）,repository可以注入到控制器的构造函数里。
	
	mvc与repository交互，而不是直接与EntityFrameWork交互。
	
使用依赖注入方法向控制器的构造函数注入repository对象，以及控制器如何使用repository来查询交易对象信息列表。使用依赖注入让模拟repository来测试控制器也变得简单：
public class AuctionsConroller: Controller
{
	private readonly IRepository _repository;
	
	public AuctionsController(IRepository repository)
	{
		_repository=repository;	
	}
	public ActionResultIndex()
	{
		var auctions = _repository.GetAll<Auction>();
		return auctions;
	}
}




对象关系映射器：
	对象关系映射器是一种在支持类型和关系数据库模型之间进行实体映射的数据访问模式。主要原因就是可以实现在业务模式和数据模型之间解耦。这种分离也称为对象关系阻抗适配object relational impedance mismatch.
主要原因：
	粒度	有时候模型类会包含比数据库的表更多的类。用不同的类来表示不同的地址是个不错的主意。

	继承	为了共享相同的逻辑类继承自别的类----OO的继承，通常关系型数据库是无法理解这种继承的概念的。

	标识	关系型数据库依赖单个的列来作为每条记录的唯一标识（主键）。经常与.net框架的做法冲突。对象相等通常通过对象标志相等a=b以及对象相等a.Equals(b)来判断，而这两种方法都没有单独的属性或者域来作为唯一的标识。

	关联	关系型数据库使用主键和外键建立实体之间的关联，.net 框架使用单向引用标识对象关联。无法区分一对多，多对多的关系。

	数据导航	框架访问数据的方式需要通过不同的模型对象之间的关联来查询数据，而在数据库中值需要使用sql语句。

实体框架概述
	LINQ to SQL 和 ADO.NET Entity Framework. 也有第三方ORM框架或者开源的 Nhibernate。

	EF是一个对象/关系映射器，以包含在.net框架里，使用ef，只需要与实体模型交互，而不需要直接与应用的关系数据库模型交互。

	抽象是允许开发人员关注业务行为和实体关系，而不是如何存储实体对象到关系数据模型中。
	为了与实体模型交互，开发人员需要使用ef数据上下文来执行查询或持久化模型操作。
	到调用这些操作时，ef会生成执行这些操作的必要的sql语句。

	在传统数据访问方法向orm转换，问题是存储过程起什么作用。
	因为实体模型主要关注如何使用orm，不考虑编写sql。ef也提供了调用存储过程的支持。

选择数据访问方法
	数据库优先方式	ef可以根据关系型数据库中的表来生成业务模型。ef使用特殊的配置文件.edmx来存储数据库schema、数据模型以及映射关系的信息。

	模型优先方式	没有数据库情况下，ef提供设计器可以创建概念数据模型。使用数据库优先模型，ef使用schema文件来存储模型到数据库schema的映射信息。创建之后，ef设计器可以生成创建数据库的schema。

	代码优先方式	使用持久层隔离persistence ignorance方法的开发人员可以直接在代码里创建业务模型。ef提供了一个特殊的映射api，以及一些惯例来支持这个方法工作。在使用代码优先方式是，ef没有任何外部文件来存储数据库schema，因为映射api在运行时使用这些惯例动态生成数据库schema。


数据库并发
	处理并发冲突是web开发人员必须面对的问题。当多个用户同时修改相同的数据时，就会引起并发冲突问题。默认，除非配置ef检测冲突，大多使用“最后进入”规则，就是最后提交修改信息的用户将会其作用，将会覆盖先提交的修改数据。

	159



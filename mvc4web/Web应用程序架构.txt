模式和原则 patterns and principles 构建mvc web应用程序。
分离关注点  separation  of concerns
提倡将多个组件的应用程序或用例责任分离开来，每个组件都有自己的特定的职责。   封装和抽象更好的隔离其他组件的关注点。
表示层presentation  业务逻辑层business logic 和数据访问层data access。
控制器
	拦截用户输入
	协调视图和模型
	处理模型和数据之间的通信
模型
	数据属性
	业务逻辑,行为和验证
视图
	渲染UI html css pdf
	绑定模型
控制性负责从模型中检索数据，并且把视图中的更改同步回模型中。控制器可以与一个或多个视图相关联。每种视图以特定的方式负责显示数据，但它以来控制器来处理和检索数据。
	
应用程序的逻辑概念架构重点关注组件之间的关系和交互，以及这些组件如何在逻辑层中实现特定的功能。
组件的设计目标就是强化分离关注点及使用抽象跨组件通信。
横切关注点是将安全、日志和缓存等隔离到不同的应用程序服务中。这些服务应该支持即插即用模块方法plug-and-play module approach。
切换不同的安全身份验证货使用不同的日志记录来源讲不会影响应用程序的其他部分。

SingleSignOnAttribute标记属性就是一个自定义的操作过滤器例子，支持跨多个asp.net web应用程序的单点登录身份验证。
public class SingleSignOnAttribute:ActionFIlterAttribute, IActionFilter
{
	void OnActionExecuted(ActionExecutedContext filterContext)
	{
		//检查安全令牌并验证用户
	}
	
	void OnActionExecuting(ActionExecutingContext filterContext)
	{
		//用来检验安全令牌是否存在的预处理代码
	}
}

应用程序逻辑设计通信的最佳方法是为每个组件及其相应的层创建可视化表示形式。横切面关注点是如何分割不同的应用程序服务的。
安全令牌Cookie  Local Storage本地存储 HTml5本地存储（缓存、离线存储）

Service Layer 服务层  用来封装负责业务处理和持久化逻辑的服务层
Repository 存储库 数据访问组件（对象关系映射框架）
Security 安全 用来验证和授权用户的安全服务
Monitoring 监控 监视健康的应用程序服务。
Session、Caching 会话和缓存  用来转换状态的应用程序服务 DATA层
External Service 外部服务 使用的外部系统 DATA层。

MVC提倡模型负责业务逻辑。每层应该分别从某种程度上验证用户的输入，理想情况下始终在发送到另一层之前检查输入数据。

每层应该承担它可以强化的验证级别责任。永远不假定调用层已验证了每个数据。


WebSite 包含的视图、控制器和其他与web先关的文件；
Core包含的业务模型的应用程序；
CustomExtensions包含的应用程序的模型绑定、路由和控制器以及是使用其他自定义扩展。


应用程序的设计应该是灵活的，并且包含适当的架空，可以根据实时监控数据来调整应用程序。

WCF数据契约来支持序列化

SOLID原则
	一些特定的面向对象object-oriented应用程序开发原则的简称，用来指导页面对象的设计与开发工作。当整个应用程序采用这些原则时，协同工作，创建易于测试和适应变化的模块化组件。
	
单一职责原则：SRP 对象应承担单一的责任，行为应该关注在责任上。不同的显示界面对应不同的控制器。比如HomeController就职包含主页有关的操作。
视图应该只关注渲染UI，避免任何数据访问逻辑。
通常不提倡Manager类，因为他可能包含了更多的职责。

开发封闭原则：Open/Closed Principle， OCP 鼓励对扩展开发，对修改关闭。我们通过继承类来扩展功能，而不是向类添加更多的行为和责任。
比较好的例子就是横切关注点，例如错误日志记录，他们都不是在相同的类中添加保存错误到数据库或到文件的代码，而是创建一个抽象类，由不同的子类实现自己的日志记录方法。
遵守这些原则实现的松耦合的组件设计带来许多好处。

里氏替换原则： Liskov Substritution Principle，LSP 的对象应易于被其子类型的实例替换，而不会影响对象的行为和规则。
尽管有一个共同的基类或接口是个不错的注意，但是这种做法可能会引起代码间接打破LSP。解决这样的问题的一种方法是添加特定类型的逻辑代码。但是它打破的LSP。
必须使用SOLID的接口隔离原则来解决。

接口隔离原则 Interface Segregaton Principle,ISP
	鼓励在整个应用程序中使用接口的同事，限制接口的大小。  应存在多个更小，更多的特定接口，而不是一个包含了所有对象行为的超类接口。
	为序列化和销毁对象分别定义单独的接口。一个类如果实现了ISerializable和IDisposable接口，那么久可以值关注序列化的调用者，值关心Iserializable接口的实现情况。
创建类的时候只关注一种行为的就只需要引用一个接口，可以使用这种技术来强制执行安全级别。
通过ISP可以确保允许匿名访问搜索控制器，而且只搜索产品并不会添加、移除他们。

依赖倒置原则：Dependency Inversion Principle，DIP 指互相依赖的组件应该通过抽象来进行交互，而不是直接通过具体来实现。将依赖于一个抽象类或接口的控制器与数据访问层交互，
而不是直接创建特定的数据访问对象进行通信。

优点：使用抽象可允许不同的组件进行开发，彼此独立的进行更改，不仅可以引入新的抽象实现代码，而且易于测试，因为可以非常方便的模拟依赖项。

控制反转 Inversion of Control ，IoC 可以让我们更容易通过单独组件来管理和创建这种抽象的生存期。 意味着将设计好的类交给系统类控制，而不是在类内部控制。

控制反转是一种提倡实现松耦合层、组件和类的设计原则，它颠倒了应用程序的控制流程。
IOC使用分离执行特定问题处理代码的概念。允许独立开发应用程序的各个组件。mvc中，可以独立设计并构建模型、视图和控制器。
控制反转设计原则的两个最流行的实现就是依赖注入Dependency injection 和服务定位Service Location.
这两种方式使用相同的中心容器central container的概念来管理依赖项的生存期。主要区别是如何访问依赖项：服务定位依赖调用者调用依赖，而依赖注入通过类的构造函数、属性或者执行方法来实现。

理解依赖关系：有多种形式
	.NET程序集可以引用一个或多个其他net程序集，
	Mvc控制器必须继承asp.net mvc基类控制器，
	asp.net应用程序需要一个IIS web服务托管。
	
Direct Reference 直接引用。  

Ioc容器替换工厂类，作为一种手段来管理控制器和存储库中类之间的依赖关系。
依然使用接口作为控制器的抽象，只有控制器不知道存储库是怎么创建的---Ioc容器负责创建并“注入”（传递）到该控制器的存储库实例。

服务定位：开发人员值需要通过Ioc容器获取一个特定的服务类即可。用容易来检查被请求的类是否已配置，并且根据配置的生命周期管理规则创建一个新的实例，或返回给请求者一个已存在的实例。
如果直接访问数据库中的某项特定服务、单个方法，仅需要请求服务的名称，并不需要接口。这样的缺点就是代码需要直接访问Ioc容器，导致代码和Ioc容器api之间的紧密耦合。
一种降低耦合的方法就是通过接口使用抽象Ioc容器。

依赖注入： 与服务定位方式相比，依赖注入提倡采用更松散耦合的方法。DI通过构造函数、属性或方法来传递依赖。
大多数开发使用构造函数注入，大多数情况下需要立即使用依赖。
然而某些Ioc容器允许通过延迟加载lazy-loading方法注入依赖。 调用属性之前是不会加载依赖项的。

依赖注入显示威力的时候是在涉及多个级别的依赖关系的时候。例如，自己依赖项有其他依赖项的情况。当Ioc容器注入一个依赖项时，它将检查是否已经有一个以前加载依赖项的实例。
如果没有，会创建一个新的实例，以查看它是否需要注入其他依赖项。Ico容器遍历依赖树时，就会创建必要的依赖。

依赖注入的方法1.构造函数 2.set方法 3.接口注入

使用控制反转，需要注意两件事情：性能和错误处理。
	1.不要使用Ioc创建大的集合对象。
	2.错误使用或者忘记注册依赖，对调试来说是个噩梦。
	3.开发需要跟踪相应的依赖项，确保在应用程序启动的时候能正确加载所有的依赖项。
	
IOC
	Ninject  包含了需要可以在asp.net平台上使用的自定义扩展功能，非常易于配置和注册依赖。
	Castle Windsor
	Autofac
	StructureMap
	Unity
	MEF
	
初始化和使用Ninject Ioc容器，需要设置启动程序项目。
启动程序项目负责管理使用Ninject注册的模块，要检查的最重要的模块就是BindingModule。注意bootstrapper类的Start()、Stop()方法。
这些方法需要在Global.asax应用程序启动时调用。

mvc框架严重依赖控制反转原则。包含了县城的控制器工厂类，可以通过拦截输入的请求、读取mvc路由信息来创建特定的控制器，最后根据路由定义来调用控制器的方法。Ioc的另一个主要应用领域是管理应用程序的视图引擎，以及控制控制器和其相应的视图之间的执行过程。

只有在使用自定义Ioc容器重写默认依赖解析器dependency resolver扩展asp.net框架来获取直接控制asp.net mvc管理依赖和创建对象的权利时，才能体现Ioc。
重写asp.net mvc默认的依赖解析器和实现IDependencyResolver接口一样简单，而且可以使用asp.net mvc框架注册自定义依赖解析器。

page-115
